"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.scrollToFragment = void 0;
function scrollToFragment(options) {
    if (options === void 0) { options = {}; }
    unmount();
    getElement = options.getElement || getElementById;
    history = options.history;
    scrollIntoView = options.scrollIntoView || defaultScrollIntoView;
    mount();
}
exports.scrollToFragment = scrollToFragment;
function mount() {
    documentObserver = new MutationObserver(handleDomMutation);
    addEventListener("click", handleDocumentClick);
    unlistenHistory = history === null || history === void 0 ? void 0 : history.listen(handleHistoryPush);
    startObserving();
}
function unmount() {
    stopObserving();
    removeEventListener("click", handleDocumentClick);
    if (unlistenHistory)
        unlistenHistory();
    unlistenHistory = undefined;
    documentObserver = undefined;
}
function startObserving() {
    stopObserving();
    if (!getLocation().hash)
        return;
    STOP_EVENTS.forEach(addStopListener);
    documentObserver === null || documentObserver === void 0 ? void 0 : documentObserver.observe(document, OBSERVER_CONFIG);
    adjustScrollPosition();
    observeTimeout = setTimeout(stopObserving, OBSERVE_TIMEOUT_MS);
}
function stopObserving() {
    clearTimeout(observeTimeout);
    cancelAnimationFrame(throttleRequestId);
    documentObserver === null || documentObserver === void 0 ? void 0 : documentObserver.disconnect();
    STOP_EVENTS.forEach(removeStopListener);
}
function addStopListener(eventName) {
    document.addEventListener(eventName, stopObserving);
}
function removeStopListener(eventName) {
    document.removeEventListener(eventName, stopObserving);
}
function handleHistoryPush(update, action) {
    if ("PUSH" === (action || update.action))
        startObserving();
}
function handleDocumentClick(event) {
    if (event.defaultPrevented)
        return;
    var anchor = closestAIncludingSelf(event.target);
    if (!anchor || !anchor.hash)
        return;
    if (anchor.pathname === getLocation().pathname)
        throttle(startObserving);
}
function closestAIncludingSelf(element) {
    var target = element;
    while (target && target.nodeName !== "A")
        target = target.parentElement;
    return target;
}
function handleDomMutation() {
    throttle(adjustScrollPosition);
}
function adjustScrollPosition() {
    var hash = getLocation().hash;
    if (!hash)
        return;
    var fragmentId = decodeURIComponent(hash.substring(1));
    var element = getElement.call(null, fragmentId);
    if (element)
        scrollIntoView.call(null, element);
}
function getLocation() {
    return (history === null || history === void 0 ? void 0 : history.location) || location;
}
function getElementById(id) {
    return document.getElementById(id);
}
function defaultScrollIntoView(element) {
    element.scrollIntoView();
}
function throttle(callback) {
    cancelAnimationFrame(throttleRequestId);
    throttleRequestId = requestAnimationFrame(callback);
}
var getElement;
var history;
var scrollIntoView;
var unlistenHistory;
var documentObserver;
var observeTimeout;
var throttleRequestId;
var OBSERVER_CONFIG = {
    attributes: true,
    characterData: true,
    childList: true,
    subtree: true,
};
var OBSERVE_TIMEOUT_MS = 10000;
var STOP_EVENTS = ["selectstart", "touchend", "wheel"];
//# sourceMappingURL=index.js.map